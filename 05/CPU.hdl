// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

//        instruction[0]: 0=A inst, 1=C inst 
//        instruction[1]: x
//        instruction[2]: x
//        instruction[3]: a
//        instruction[4]: c
//        instruction[5]: c
//        instruction[6]: c
//        instruction[7]: c
//        instruction[8]: c
//        instruction[9]: c
//        instruction[10]: d: write A
//        instruction[11]: d: write D
//        instruction[12]: d: write M
//        instruction[13]: j:
//        instruction[14]: j:
//        instruction[15]: j:
    PARTS:
    Decode (instruction=instruction, i=i, value=value, a=a, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, da=da, dd=dd, dm=dm, jl=jl, je=je, jg=jg);

    ALU (x=alux, y=aluy, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=aluout, zr=zr, ng=ng);
    And16 (a=true, b=aluout, out=outM);

    Not (in=i, out=ni);
    Or (a=ni, b=da, out=loada);

    Mux16 (a=instruction, b=aluout, sel=i, out=ain);
    ARegister (in=ain, load=loada, out=aout);

    And16 (a=true, b=aout, out[0..14]=addressM);

    Mux16 (a=aout, b=inM, sel=a, out=aluy);

    DRegister (in=aluout, load=dd, out=alux);

    And (a=true, b=dm, out=writeM);

    Not (in=zr, out=nzr);
    Not (in=ng, out=nng);
    And (a=nzr, b=nng, out=ps);

    And (a=zr, b=je, out=jmpz);
    And (a=ng, b=jl, out=jmpl);
    And (a=ps, b=jg, out=jmpg);

    Or (a=jmpz, b=jmpl, out=jmpzl);
    Or (a=jmpzl, b=jmpg, out=jmp);
    Not (in=jmp, out=inc);

    PC (in=aout, load=jmp, inc=inc, reset=reset, out[0..14]=pc);
}
